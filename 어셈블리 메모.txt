[어셈블리어]
C가 기본으로 되어야함, 어셈블리어는 하드웨어와 가장 가까운 언어로 CPU가 알아먹을 수
있는 언어로 적는 언어, 많은 디버거가 있겠지만 올리디버거를 사용하려 함

[기초 문법(?)]
mov : 값을 덮어씨움
ex) mov reg,(즉시 값)   /   mov reg,reg
입력한 값 또는 다른 레지스터의 값을 레지스터에 덮어 씌움
주소를 넣을 때는 16진수로 들어감 (8자리 4(byte))

[레지스터]
AX : 8(bit)공간 두개
>>AH : 자릿수가 큰쪽 바이트, AL : 자릿수가 작은쪽 바이트

EAX : 8(bit)공간 네개
>>낮은 자리쪽 두 바이트가 AX
그 AX안에서 AH, AL이 똑같이 있음
ex) mov eax, 12D687
AX : D687 | AH : D6 | AL : 87A

E[A,B,C,D]X | [A,B,C,D]X | [A,B,C,D]H | [A,B,C,D]L
요런 것들이 있음

mov 명령어에서 CH와 같이 특정 바이트를 지정해서 값을 넣을 수 있음

[램(RAM)] - 주기억장치
┌───────────┐ ┌─┐                  ┌───────────────┐
│    CPU    │ │R│                  │               │
└───────────┘ │A│                  │               │
              │M│                  │    HARDDISK   │
              └─┘                  │               │
                ┌─┐________________│               │
                └─┘                └───────────────┘
용량 CPU < RAM < HARDDISK
속도 CPU > RAM > HARDDISK
가격 CPU > RAM > HARDDISK

메모리(램)을 주기억장치로 쓰는 이유는 CPU는 잠깐 생각(연산)을 담당하며 하드디스크는
기억한 자료들이 다 저장되긴 하지만 찾아볼 부분이 너무 많아 느림
기억 = CPU, 쪽지 = RAM, 책 = HARDDISK  

[RAM & ROM]
RAM : 읽고 쓰기가 가능한 메모리로 회로 변경이 가능
ROM : 한 번 만들면 회로 변경이 불가능하고 읽는 것만 가능
연결 = 1, 끊김 = 0으로 놓았을 때
    ┌────────────────────┐
   ┌┴─┐                  │
 ┌─┴──┴─┐                │
 │      │          ┌─────┴─────┐
 │      │          │           │
 │      │          │    CPU    │
 │      │          │           │
 │      │          └─────┬┬────┘
 │      │                ││
 └──┬┬──┘                ││
    │└───────────────────┘│
    └───────━   ━─────────┘
와 같이 자릿수에 따라 입력이 가능한데 연결을 끊어[전기 신호를 안줘]서 0을 넣음
이렇게 메모리의 용량을 늘리는데 용량을 늘릴수록 전선의 양이 매우 많이 필요함
(+메모리 핀이 부족함)
이렇기 때문에 주소를 이용하여 값을 전달함(스위치를 이용하여 찾아갈 주소를 지정)
      ┌───\8─────┐
┌─────┴─────┐    │
│           │    ├ 1 0 0 1 0 1 1 0 1
│    CPU    │    │          │
│           │    └ 0 1 1 1 0 0 1 0 1
└─────┬┬────┘              │
      │└──────────┐        │
     ┌┴─┐         │        │
   ┌─┴──┴─┐       │        └┐
   │      │       │         │
   │      │       │         │
   │      │       │         │
   │      │       └──────── ○ (스위치)
   │      │                 │
   │      │                 │
   └───┬──┘                 │
       └────────────────────┘ 의 경우 아래 주소만 입력

      ┌───\8─────┐
┌─────┴─────┐    │
│           │    ├ 1 0 0 1 0 1 1 0 1
│    CPU    │    │          │
│           │    └ 0 1 1 1 0│0 1 0 1
└─────┬┬────┘              ││
      │└──────────┐         │
     ┌┴─┐         │         │
   ┌─┴──┴─┐       │         │
   │      │       │         │
   │      │       │         │
   │      │       │         │
   │      │       └──────── ○ (스위치)
   │      │                 │
   │      │                 │
   └───┬──┘                 │
       └────────────────────┘ 의 경우 위에 주소만 입력

메모리는 주소하나에 한 바이트의 데이터가 들어가도록 시스템이 설계됨
인텔 32비트 컴퓨터에서는 주소값을 32비트로 표현 가능
=한 바이트를 설정할 수 있는 스위치가 32개 있다=경우의 수 2^32개
=>4GB의 메모리 공간 사용  

[]안에 주소를 써서 공간 지정(16진수)
